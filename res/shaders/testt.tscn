[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

//uniform float time : hint_range(0.0, 10.0);
const float PI = 3.14159265359;

void fragment()
{
	vec2 iResolution = 1.0 / SCREEN_PIXEL_SIZE;
	
	vec2 uv = FRAGCOORD.xy/iResolution;
	uv = uv - vec2(0.5);
	uv.x *= iResolution.x/iResolution.y;
	
	float dist = length(uv) * 0.04;
	float angle = atan(uv.x, uv.y);
	
	dist = pow(dist + 0.1, 0.3);
	dist *= 1000.0;
	
	float r = 0.5 + 0.5*sin(dist - 20.0 * TIME);
	r *= 1.0 + sin(angle*2.0*PI*35.0) * 0.7; 
	//r *= sin(dist*PI - TIME*10.0); 
	
	// Circle mask
	float rad = sin(1.0 * (TIME - 3.0)) * iResolution.x;
	vec2 toMiddle = iResolution.xy * 0.5 - FRAGCOORD.xy;
	float lengthToMiddle = toMiddle.x * toMiddle.x + toMiddle.y * toMiddle.y;
	if ((lengthToMiddle > rad * rad) || (TIME < 3.0)) {
		COLOR = vec4(0,0,0,0);
	} else {
		COLOR = vec4(0, 0, r, 1.0);
	}
   
	
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[node name="ColorRect" type="ColorRect"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
